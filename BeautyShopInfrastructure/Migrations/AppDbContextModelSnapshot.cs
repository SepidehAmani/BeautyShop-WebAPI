// <auto-generated />
using System;
using BeautyShopInfrastructure.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeautyShopInfrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BeautyShopDomain.Entities.ContactUs.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.Image.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SizeInBytes")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.Order.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.Order.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId1")
                        .HasColumnType("int");

                    b.Property<int>("ProductItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductItemId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderId1");

                    b.HasIndex("ProductItemId");

                    b.HasIndex("ProductItemId1");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.Product.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = -2,
                            CreateDate = new DateTime(2024, 8, 20, 12, 24, 19, 153, DateTimeKind.Local).AddTicks(8904),
                            IsDelete = false,
                            Name = "آرایشی"
                        },
                        new
                        {
                            Id = -1,
                            CreateDate = new DateTime(2024, 8, 20, 12, 24, 19, 153, DateTimeKind.Local).AddTicks(8923),
                            IsDelete = false,
                            Name = "بهداشتی"
                        },
                        new
                        {
                            Id = -4,
                            CreateDate = new DateTime(2024, 8, 20, 12, 24, 19, 153, DateTimeKind.Local).AddTicks(8924),
                            IsDelete = false,
                            Name = "زیردسته بندی آرایشی",
                            ParentId = -2
                        },
                        new
                        {
                            Id = -3,
                            CreateDate = new DateTime(2024, 8, 20, 12, 24, 19, 153, DateTimeKind.Local).AddTicks(8925),
                            IsDelete = false,
                            Name = "زیردسته بندی بهداشتی",
                            ParentId = -1
                        });
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.Product.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DiscountPercentage")
                        .HasColumnType("int");

                    b.Property<int?>("GeneralImageId")
                        .HasColumnType("int");

                    b.Property<int?>("GeneralImageId1")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CategoryId1");

                    b.HasIndex("GeneralImageId")
                        .IsUnique()
                        .HasFilter("[GeneralImageId] IS NOT NULL");

                    b.HasIndex("GeneralImageId1");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = -4,
                            CategoryId = -4,
                            CreateDate = new DateTime(2024, 8, 20, 12, 24, 19, 159, DateTimeKind.Local).AddTicks(1327),
                            Description = "",
                            DiscountPercentage = 10,
                            IsDelete = false,
                            Name = "Product4",
                            Price = 1000
                        },
                        new
                        {
                            Id = -3,
                            CategoryId = -3,
                            CreateDate = new DateTime(2024, 8, 20, 12, 24, 19, 159, DateTimeKind.Local).AddTicks(1346),
                            Description = "",
                            DiscountPercentage = 10,
                            IsDelete = false,
                            Name = "Product3",
                            Price = 1000
                        },
                        new
                        {
                            Id = -2,
                            CategoryId = -4,
                            CreateDate = new DateTime(2024, 8, 20, 12, 24, 19, 159, DateTimeKind.Local).AddTicks(1347),
                            Description = "",
                            DiscountPercentage = 10,
                            IsDelete = false,
                            Name = "Product2",
                            Price = 2000
                        },
                        new
                        {
                            Id = -1,
                            CategoryId = -3,
                            CreateDate = new DateTime(2024, 8, 20, 12, 24, 19, 159, DateTimeKind.Local).AddTicks(1348),
                            Description = "",
                            DiscountPercentage = 10,
                            IsDelete = false,
                            Name = "Product1",
                            Price = 2000
                        });
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.Product.ProductFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId1");

                    b.ToTable("ProductFeature");
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.Product.ProductItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId1");

                    b.ToTable("ProductItem");
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.User.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreateDate = new DateTime(2024, 8, 20, 12, 24, 19, 161, DateTimeKind.Local).AddTicks(7919),
                            IsDelete = false,
                            UniqueName = "Admin"
                        });
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreateDate = new DateTime(2024, 8, 20, 12, 24, 19, 164, DateTimeKind.Local).AddTicks(473),
                            IsDelete = false,
                            MobileNumber = "09141001010",
                            Password = "20-08-20-E3-22-78-15-ED-17-56-A6-B5-31-E7-E0-D2",
                            Username = "Admin"
                        });
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.User.UserSelectedRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserSelectedRole");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreateDate = new DateTime(2024, 8, 20, 12, 24, 19, 164, DateTimeKind.Local).AddTicks(2404),
                            IsDelete = false,
                            RoleId = -1,
                            UserId = -1
                        });
                });

            modelBuilder.Entity("BeautyShopDomain.ViewModels.DiscountedProductViewModel", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountPercentage")
                        .HasColumnType("int");

                    b.Property<int>("FinalPrice")
                        .HasColumnType("int");

                    b.Property<int?>("GeneralImageId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasIndex("GeneralImageId");

                    b.ToTable((string)null);

                    b.ToView("DiscountedProducts", (string)null);
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.Order.Order", b =>
                {
                    b.HasOne("BeautyShopDomain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyShopDomain.Entities.User.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.Order.OrderItem", b =>
                {
                    b.HasOne("BeautyShopDomain.Entities.Order.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyShopDomain.Entities.Order.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId1");

                    b.HasOne("BeautyShopDomain.Entities.Product.ProductItem", null)
                        .WithMany()
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyShopDomain.Entities.Product.ProductItem", "ProductItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductItemId1");

                    b.Navigation("Order");

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.Product.Product", b =>
                {
                    b.HasOne("BeautyShopDomain.Entities.Product.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyShopDomain.Entities.Product.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId1");

                    b.HasOne("BeautyShopDomain.Entities.Image.Image", null)
                        .WithOne()
                        .HasForeignKey("BeautyShopDomain.Entities.Product.Product", "GeneralImageId");

                    b.HasOne("BeautyShopDomain.Entities.Image.Image", "GeneralImage")
                        .WithMany()
                        .HasForeignKey("GeneralImageId1");

                    b.Navigation("Category");

                    b.Navigation("GeneralImage");
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.Product.ProductFeature", b =>
                {
                    b.HasOne("BeautyShopDomain.Entities.Product.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyShopDomain.Entities.Product.Product", "Product")
                        .WithMany("ProductFeatures")
                        .HasForeignKey("ProductId1");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.Product.ProductItem", b =>
                {
                    b.HasOne("BeautyShopDomain.Entities.Image.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("BeautyShopDomain.Entities.Product.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyShopDomain.Entities.Product.Product", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductId1");

                    b.Navigation("Image");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.User.UserSelectedRole", b =>
                {
                    b.HasOne("BeautyShopDomain.Entities.User.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyShopDomain.Entities.User.Role", "Role")
                        .WithMany("UserSelectedRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("BeautyShopDomain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyShopDomain.Entities.User.User", "User")
                        .WithMany("UserSelectedRoles")
                        .HasForeignKey("UserId1");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeautyShopDomain.ViewModels.DiscountedProductViewModel", b =>
                {
                    b.HasOne("BeautyShopDomain.Entities.Image.Image", "GeneralImage")
                        .WithMany()
                        .HasForeignKey("GeneralImageId");

                    b.Navigation("GeneralImage");
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.Order.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.Product.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.Product.Product", b =>
                {
                    b.Navigation("ProductFeatures");

                    b.Navigation("ProductItems");
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.Product.ProductItem", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.User.Role", b =>
                {
                    b.Navigation("UserSelectedRoles");
                });

            modelBuilder.Entity("BeautyShopDomain.Entities.User.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("UserSelectedRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
